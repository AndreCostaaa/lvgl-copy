import argparse
from dataclasses import dataclass, asdict
import json
import msgpack
from dacite import from_dict


@dataclass
class BenchmarkScene:
    scene_name: str
    avg_cpu: int
    avg_fps: int
    avg_time: int
    render_time: int
    flush_time: int


@dataclass
class BenchmarkSummary:
    scenes: list[BenchmarkScene]
    commit_hash: str


@dataclass
class PreviousResults:
    image_type: str
    config: str
    results: list[BenchmarkSummary]


def format_table(results: list[dict], prev_results: list[dict] | None):
    table = "| Scene Name | Avg CPU (%) | Avg FPS | Avg Time (ms) | Render Time (ms) | Flush Time (ms) |\n"
    table += "|------------|------------|---------|--------------|----------------|--------------|\n"
    data_keys = ["avg_cpu", "avg_fps", "avg_time", "render_time", "flush_time"]

    if prev_results is None:
        for scene_results in results:
            print(scene_results)
            table += f"| {scene_results['scene_name']} |"
            for key in data_keys:
                table += f" {scene_results[key]} |"
            table += "\n"
    else:
        for scene_results, prev_scene_results in zip(results, prev_results):
            delta_p = {
                key: (scene_results[key] - prev_scene_results[key]) * 100
                for key in data_keys
            }
            table += f"| {scene_results['scene_name']} |"
            for key in data_keys:
                table += f" {scene_results[key]} ({delta_p[key]:+}%)|"
            table += "\n"

    return table


def main():
    parser = argparse.ArgumentParser(
        description="Process previous and new results, and output a comment file."
    )

    parser.add_argument(
        "--previous",
        type=str,
        nargs="+",
        required=False,
        help="Path to the previous results file (supports multiple, e.g., results*.mpk)",
    )
    parser.add_argument(
        "--new",
        type=str,
        nargs="+",
        required=True,
        help="Paths to new results files (supports multiple, e.g., results*.json)",
    )
    parser.add_argument(
        "-o",
        "--output",
        type=str,
        required=True,
        help="Output file path (e.g., comment.md)",
    )

    args = parser.parse_args()

    all_previous_results: list[PreviousResults] = []
    if args.previous:
        previous_results_paths = sorted(args.previous)
        for results_path in previous_results_paths:
            _, image_type, config = results_path.replace(".json", "").split("-")

            with open(results_path, "rb") as f:
                previousb = f.read()
                rs: list = msgpack.unpackb(previousb)
                all_previous_results.append(
                    PreviousResults(
                        config=config,
                        image_type=image_type,
                        results=[
                            from_dict(data_class=BenchmarkSummary, data=result)
                            for result in rs
                        ],
                    )
                )

    results_paths = sorted(args.new)
    results: dict[str, list[dict]] = {}
    for results_path in results_paths:
        with open(results_path, "r") as f:
            r: list[dict] = json.load(f)
            results[results_path] = r

    comment = "Hi :wave:, thank you for your PR!\n\n"
    comment += "We've run benchmarks in an emulated environment."
    comment += " Here are the results:\n\n"

    for result_path, result in results.items():
        _, image_type, config = result_path.replace(".json", "").split("-")
        prev_results = [
            x
            for x in all_previous_results
            if x.config == config and x.image_type == image_type
        ]
        if len(prev_results) > 0 and len(prev_results[0].results) > 0:
            latest_scenes = prev_results[0].results[-1].scenes
            latest_all_scene_avg = [
                asdict(
                    [d for d in latest_scenes if d.scene_name == "All scenes avg."][0]
                )
            ]
            latest_results = [asdict(x) for x in latest_scenes]
        else:
            latest_results = None
            latest_all_scene_avg = None

        all_scene_avg = [d for d in result if d["scene_name"] == "All scenes avg."]

        comment += f"#### ARM Emulated {image_type} - {config}\n\n"
        comment += format_table(all_scene_avg, latest_all_scene_avg)
        comment += "\n<details>"
        comment += "\n<summary>"
        comment += "\nDetailed Results Per Scene"
        comment += "\n</summary>\n\n"
        comment += format_table(result, latest_results)
        comment += "\n\n</details>\n\n"

    comment += "\n\n"
    comment += "---"
    comment += "\n\n"
    comment += ":robot: This comment was automatically generated by a bot."

    with open(args.output, "w") as f:
        f.write(comment)


if __name__ == "__main__":
    main()
